"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const utils_1 = require("./utils");
const constants_1 = require("next-server/constants");
const normalize_page_path_1 = require("./normalize-page-path");
function pageNotFoundError(page) {
    const err = new Error(`Cannot find module for page: ${page}`);
    err.code = 'ENOENT';
    return err;
}
exports.pageNotFoundError = pageNotFoundError;
exports.tryAmp = (manifest, page) => {
    page = page === '/' ? '/index' : page;
    const hasAmp = manifest[page + '.amp'];
    if (hasAmp) {
        page += '.amp';
    }
    else if (manifest[page + '/index.amp']) {
        page += '/index.amp';
    }
    return page;
};
function getPagePath(page, distDir, opts = {}) {
    const serverBuildPath = path_1.join(distDir, constants_1.SERVER_DIRECTORY);
    const pagesManifest = require(path_1.join(serverBuildPath, constants_1.PAGES_MANIFEST));
    try {
        page = normalize_page_path_1.normalizePagePath(page);
        if (opts.amphtml || !pagesManifest[page]) {
            page = exports.tryAmp(pagesManifest, page);
            // Force .amp to show 404 if set
            const isAmp = page.endsWith('.amp');
            if (opts.amphtml && !isAmp) {
                page += '.amp';
            }
            opts.amphtml = opts.amphtml || isAmp;
        }
    }
    catch (err) {
        // tslint:disable-next-line
        console.error(err);
        throw pageNotFoundError(page);
    }
    if (!pagesManifest[page]) {
        throw pageNotFoundError(page);
    }
    return path_1.join(serverBuildPath, pagesManifest[page]);
}
exports.getPagePath = getPagePath;
function requirePage(page, distDir, opts = {}) {
    const pagePath = getPagePath(page, distDir, opts);
    const isAmp = utils_1.isAmpFile(pagePath);
    let hasAmp = false;
    if (!isAmp) {
        try {
            hasAmp = utils_1.isAmpFile(getPagePath(page, distDir, { amphtml: true }));
        }
        catch (_) { }
    }
    opts.amphtml = opts.amphtml || isAmp;
    return {
        hasAmp,
        mod: require(pagePath),
    };
}
exports.requirePage = requirePage;
