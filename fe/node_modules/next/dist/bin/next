#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = __importDefault(require("next/dist/compiled/arg/index.js"));
['react', 'react-dom'].forEach((dependency) => {
    try {
        // When 'npm link' is used it checks the clone location. Not the project.
        require.resolve(dependency);
    }
    catch (err) {
        // tslint:disable-next-line
        console.warn(`The module '${dependency}' was not found. Next.js requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ${dependency}'`);
    }
});
const defaultCommand = 'dev';
const commands = {
    build: async () => await Promise.resolve().then(() => __importStar(require('../cli/next-build'))).then((i) => i.nextBuild),
    start: async () => await Promise.resolve().then(() => __importStar(require('../cli/next-start'))).then((i) => i.nextStart),
    export: async () => await Promise.resolve().then(() => __importStar(require('../cli/next-export'))).then((i) => i.nextExport),
    dev: async () => await Promise.resolve().then(() => __importStar(require('../cli/next-dev'))).then((i) => i.nextDev),
};
const args = index_js_1.default({
    // Types
    '--version': Boolean,
    '--help': Boolean,
    '--inspect': Boolean,
    // Aliases
    '-v': '--version',
    '-h': '--help',
}, {
    permissive: true,
});
// Version is inlined into the file using taskr build pipeline
if (args['--version']) {
    // tslint:disable-next-line
    console.log(`Next.js v${"8.0.4"}`);
    process.exit(0);
}
// Check if we are running `next <subcommand>` or `next`
const foundCommand = Boolean(commands[args._[0]]);
// Makes sure the `next <subcommand> --help` case is covered
// This help message is only showed for `next --help`
if (!foundCommand && args['--help']) {
    // tslint:disable-next-line
    console.log(`
    Usage
      $ next <command>

    Available commands
      ${Object.keys(commands).join(', ')}

    Options
      --version, -p   Version number
      --inspect       Enable the Node.js inspector
      --help, -h      Displays this message

    For more information run a command with the --help flag
      $ next build --help
  `);
    process.exit(0);
}
const command = foundCommand ? args._[0] : defaultCommand;
const forwardedArgs = foundCommand ? args._.slice(1) : args._;
if (args['--inspect'])
    throw new Error(`Use env variable NODE_OPTIONS instead: NODE_OPTIONS="--inspect" next ${command}`);
// Make sure the `next <subcommand> --help` case is covered
if (args['--help']) {
    forwardedArgs.push('--help');
}
const defaultEnv = command === 'dev' ? 'development' : 'production';
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;
commands[command]().then((exec) => exec(forwardedArgs));
if (command === 'dev') {
    const { CONFIG_FILE } = require('next-server/constants');
    const { watchFile } = require('fs');
    watchFile(`${process.cwd()}/${CONFIG_FILE}`, (cur, prev) => {
        if (cur.size > 0 || prev.size > 0) {
            // tslint:disable-next-line
            console.log(`\n> Found a change in ${CONFIG_FILE}. Restart the server to see the changes in effect.`);
        }
    });
}
